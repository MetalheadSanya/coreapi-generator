//
// SimpleComponentSchemas.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Обычный дискрипшен для обычного объекта */
@available(*, deprecated, message: "This schema is deprecated.")
public struct SimpleComponentSchemas: Codable, Hashable {

    public enum ThirdProp: String, Codable, CaseIterable {
        case a = "a"
        case b = "b"
        case c = "c"
    }
    /** Самое обычное поле, скучнее не придумать */
    public var firstProp: String?
    public var secondProp: String?
    /** Номер телефона в формате ITU-T E.164 */
    public var phone: String?
    public var phoneWithDescription: String?
    /** Внутренний enum: * a - description for value a * b - description for value b * c - description for value c  */
    public var thirdProp: ThirdProp?
    public var outerEnumWithDesc: OuterEnum?
    public var outerEnum: OuterEnum?

    public init(firstProp: String? = nil, secondProp: String? = nil, phone: String? = nil, phoneWithDescription: String? = nil, thirdProp: ThirdProp? = nil, outerEnumWithDesc: OuterEnum? = nil, outerEnum: OuterEnum? = nil) {
        self.firstProp = firstProp
        self.secondProp = secondProp
        self.phone = phone
        self.phoneWithDescription = phoneWithDescription
        self.thirdProp = thirdProp
        self.outerEnumWithDesc = outerEnumWithDesc
        self.outerEnum = outerEnum
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstProp
        case secondProp
        case phone
        case phoneWithDescription
        case thirdProp
        case outerEnumWithDesc
        case outerEnum
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstProp, forKey: .firstProp)
        try container.encodeIfPresent(secondProp, forKey: .secondProp)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(phoneWithDescription, forKey: .phoneWithDescription)
        try container.encodeIfPresent(thirdProp, forKey: .thirdProp)
        try container.encodeIfPresent(outerEnumWithDesc, forKey: .outerEnumWithDesc)
        try container.encodeIfPresent(outerEnum, forKey: .outerEnum)
    }
}

